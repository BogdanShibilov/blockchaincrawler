{
    "swagger": "2.0",
    "info": {
        "description": "Allows to get crawled information about blockchain blocks",
        "title": "Blockchain crawler api",
        "contact": {
            "name": "Bogdan Shibilov",
            "email": "bogdanshibilov@gmail.com"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/admin/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns your all users' data. Admin only",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Gets all users",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin/user/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes user with given id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete user by id",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/confirmuser": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tries to confirm user account with given code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confrims user account",
                "parameters": [
                    {
                        "description": "Code used to confirm user",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ConfirmUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/auth/getconfirmation": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends code which can be used to confirm user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sends code",
                "parameters": [
                    {
                        "description": "Email where code would be sent",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SendConfirmCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/refreshjwt": {
            "post": {
                "description": "Returns new jwt token which contains access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refreshes jwt token",
                "parameters": [
                    {
                        "description": "Contains refresh token string",
                        "name": "refreshToken",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RenewTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.JwtToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Returns jwt token which contains access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generates jwt token",
                "parameters": [
                    {
                        "description": "Email and password of account",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreds"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.JwtToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Create a new user in user database with given credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Signs up",
                "parameters": [
                    {
                        "description": "Email and password of account",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreds"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/block/header": {
            "get": {
                "description": "Returns paginated list of block headers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get headers array",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PagedDto"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/block/recent": {
            "get": {
                "description": "Returns array of recently discovered blocks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get recent blocks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.BlockDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/block/transaction/{blockhash}": {
            "get": {
                "description": "Returns paginated list of transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get transactions array",
                "parameters": [
                    {
                        "type": "string",
                        "description": "looks up txs by this hash",
                        "name": "blockhash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PagedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/block/withdrawal/{blockhash}": {
            "get": {
                "description": "Returns paginated list of withdrawals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get withdrawals array",
                "parameters": [
                    {
                        "type": "string",
                        "description": "looks up withdrawals by this hash",
                        "name": "blockhash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PagedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns your profile data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Gets your profile",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates your profile with given profile data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updates profile",
                "parameters": [
                    {
                        "description": "Your profile data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserProfileDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "big.Int": {
            "type": "object"
        },
        "dto.BlockDto": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/dto.HeaderDTO"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TxDto"
                    }
                },
                "withdrawals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.WithdrawalDto"
                    }
                }
            }
        },
        "dto.ConfirmUserRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 4
                }
            }
        },
        "dto.HeaderDTO": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "type": "string"
                },
                "difficulty": {
                    "$ref": "#/definitions/big.Int"
                },
                "extraData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "gasLimit": {
                    "type": "integer"
                },
                "gasUsed": {
                    "type": "integer"
                },
                "miner": {
                    "type": "string"
                },
                "mixHash": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "number": {
                    "$ref": "#/definitions/big.Int"
                },
                "parentHash": {
                    "type": "string"
                },
                "receiptsRoot": {
                    "type": "string"
                },
                "sha3Uncles": {
                    "type": "string"
                },
                "stateRoot": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "transactionsRoot": {
                    "type": "string"
                }
            }
        },
        "dto.JwtToken": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "dto.PagedDto": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                },
                "value": {}
            }
        },
        "dto.RenewTokenRequest": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "dto.SendConfirmCodeRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.TxDto": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "type": "string"
                },
                "chainId": {
                    "$ref": "#/definitions/big.Int"
                },
                "gas": {
                    "type": "integer"
                },
                "gasPrice": {
                    "$ref": "#/definitions/big.Int"
                },
                "hash": {
                    "type": "string"
                },
                "input": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "maxFeePerGas": {
                    "$ref": "#/definitions/big.Int"
                },
                "nonce": {
                    "type": "integer"
                },
                "r": {
                    "$ref": "#/definitions/big.Int"
                },
                "s": {
                    "$ref": "#/definitions/big.Int"
                },
                "to": {
                    "type": "string"
                },
                "v": {
                    "$ref": "#/definitions/big.Int"
                },
                "value": {
                    "$ref": "#/definitions/big.Int"
                }
            }
        },
        "dto.UserCreds": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "dto.UserProfileDto": {
            "type": "object",
            "properties": {
                "aboutMe": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "dto.WithdrawalDto": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount": {
                    "type": "integer"
                },
                "blockHash": {
                    "type": "string"
                },
                "validatorIndex": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}